Tableaux
===============================
Exercice 2
===============================
Le codage par différence (<i>delta encoding en anglais</i>) permet de compresser un tableau de données en indiquant pour chaque donnée, sa différence avec la précédente (plutôt que la donnée elle-même). On se retrouve alors avec un tableau de données assez petites nécessitant moins de place en mémoire. Cette méthode se révèle efficace lorsque les valeurs consécutives sont proches.<br>
Programmer la fonction <strong>delta</strong> qui prend en paramètre un tableau non vide de nombres entiers et qui renvoie un tableau contenant les valeurs entières compressées à l’aide cette technique.<br>
Exemples :
<ul>
<li><strong>delta([1000, 800, 802, 1000, 1003])</strong> renvoie <strong>[1000, -200, 2, 198, 3]</strong></li>
<li><strong>delta([42])</strong> renvoie <strong>[42]</strong></li>
</ul>
===============================
# Voici une implémentation possible

def delta(tab):
    d = [tab[0]]
    for i in range(1, len(tab)):
        d.append(tab[i] - tab[i-1])
    return d

#! exemple

print(delta([1000, 800, 802, 1000, 1003]))
===============================
[ ["[1000,800,802,1000,1003]", "#!\ns=#?\ntry:\n    print(delta(s))\nexcept:\n    print('exception')"],
  ["[42]", "#!\ns=#?\ntry:\n    print(delta(s))\nexcept:\n    print('exception')"],
  ["[1,2,3,4,5,6]", "#!\ns=#?\ntry:\n    print(delta(s))\nexcept:\n    print('exception')"],
  ["[8,8,8,8]", "#!\ns=#?\ntry:\n    print(delta(s))\nexcept:\n    print('exception')"] ]
===============================
def delta(tab):



#! exemple

print(delta([1000, 800, 802, 1000, 1003]))
